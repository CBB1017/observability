global:
  dnsService: "coredns"

resources:
  requests:
    memory: "50Mi"
    cpu: "500m"
  limits:
    memory: "100Mi"
    cpu: "1000m"

loki:
  extraArgs:
    - -config.expand-env=true
  storage:
    s3:
      s3: s3://test-k8s-loki-minio/ #bucket name
      endpoint: http://loki-minio.observability.svc.cluster.local:9000
      secretAccessKey: <your-secret> #S3 bucket을 사용
      accessKeyId: <your-id> #S3 bucket을 사용
      signatureVersion: null
      s3ForcePathStyle: false
      insecure: true
  storage_config:
    boltdb_shipper:
      active_index_directory: /data/loki/index
      cache_location: /data/loki/cache
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 4
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true

chunksCache:
  allocatedMemory: 500

deploymentMode: Distributed

ingester:
  replicas: 3 # To ensure data durability with replication
  zoneAwareReplication:
    enabled: false
querier:
  replicas: 3 # Improve query performance via parallelism
  maxUnavailable: 2
queryFrontend:
  replicas: 2
  maxUnavailable: 1
queryScheduler:
  replicas: 2
distributor:
  replicas: 3
  maxUnavailable: 2
compactor:
  replicas: 1
indexGateway:
  replicas: 2
  maxUnavailable: 1

bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0

  # This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  service:
    type: ClusterIP


# Enable minio for storage
minio:
  enabled: true
  persistence:
    size: 5Gi
    storageClass: minio
