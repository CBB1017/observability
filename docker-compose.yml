x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

services:
  otel-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    logging: *default-logging

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki-wal:/wal  # Mount a folder for WAL with write permission
      - loki-chunks:/loki/chunks
      - loki-index:/loki/index
    user: "1000:1000"
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:latest
    ports:
      - "3200:3200"
      #- "4327:4317"
      #- "4328:4318"
    volumes:
      - ./tempo-config.yaml:/etc/tempo/tempo.yaml
      - tempo-wal:/var/tempo/wal
      - tempo-blocks:/var/tempo/blocks
    environment:
      - STORAGE_LOCAL_PATH=/var/tempo/blocks
      - METRICS_GENERATOR_STORAGE_PATH=/var/tempo/generator/wal
    command: ["-config.file=/etc/tempo/tempo.yaml"]  # 추가된 부분
    user: "root:root"  # 사용자 ID와 그룹 ID를 명시
    networks:
      - monitoring
    logging: *default-logging

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
#      - GF_AUTH_API_KEY_ENABLED=true
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_ADMIN_PASSWORD=1Q2w3e4r1!
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
      - tempo
    logging: *default-logging

  app-a:
    build:
      context: ../jest-sample
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - TARGET_ONE_HOST=app-b
      - TARGET_TWO_HOST=app-c
      - OTEL_SERVICE_NAME=app-a # service name for Span
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-a # add custom resource attribute to Span for Grafana Trace to Logs feature
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-a # override default value of management.metrics.tags.application in app/src/main/resources/application.properties
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      - node-exporter
      - otel-collector
    logging: *default-logging

  app-b:
    image: ghcr.io/blueswen/spring-boot-observability/app:latest
    volumes:
      - ./opentelemetry-javaagent.jar:/etc/opentelemetry-javaagent.jar
    environment:
      - TARGET_ONE_HOST=app-a
      - TARGET_TWO_HOST=app-c
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
        #- OTEL_JAVAAGENT_DEBUG=true
      - OTEL_SERVICE_NAME=app-b
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-b
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-b
      - JAVA_TOOL_OPTIONS="-javaagent:/etc/opentelemetry-javaagent.jar"
    ports:
      - "8081:8080"
    networks:
      - monitoring
    depends_on:
      - node-exporter
      - otel-collector
    logging: *default-logging

  app-c:
    image: ghcr.io/blueswen/spring-boot-observability/app:latest
    volumes:
      - ./opentelemetry-javaagent.jar:/etc/opentelemetry-javaagent.jar
    environment:
      - TARGET_ONE_HOST=app-a
      - TARGET_TWO_HOST=app-b
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
        #- OTEL_JAVAAGENT_DEBUG=true
      - OTEL_SERVICE_NAME=app-c
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-c
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-c
      - JAVA_TOOL_OPTIONS="-javaagent:/etc/opentelemetry-javaagent.jar"
    ports:
      - "8082:8080"
    networks:
      - monitoring
    depends_on:
      - node-exporter
      - otel-collector
    logging: *default-logging

  postgres:
    image: postgres:16.2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    networks:
      - monitoring
    logging: *default-logging

  redis:
    image: redis:7.2.4
    ports:
      - "6379:6379"
    networks:
      - monitoring
    logging: *default-logging

  node-exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
volumes:
  loki-wal:
  loki-chunks:
  loki-index:
  tempo-wal:
  tempo-blocks:
  grafana-data:
